From c93cb045630db71f8fbc0e0b67960a28764a6852 Mon Sep 17 00:00:00 2001
From: Michael Haubenwallner <michael.haubenwallner@salomon.at>
Date: Wed, 6 Nov 2013 12:40:05 +0100
Subject: [PATCH] Add ebuildshell feature, bug#155161.

---
 bin/ebuild.sh                        | 131 ++++++++++++++++++++++++++++++++++-
 bin/filter-bash-environment.py       |  50 ++++++++-----
 bin/save-ebuild-env.sh               |   2 +-
 man/make.conf.5                      |   6 ++
 pym/_emerge/AbstractEbuildProcess.py |   1 +
 pym/portage/const.py                 |   1 +
 6 files changed, 173 insertions(+), 18 deletions(-)

diff --git a/bin/ebuild.sh b/bin/ebuild.sh
index f1586b2..cb487c0 100755
--- a/bin/ebuild.sh
+++ b/bin/ebuild.sh
@@ -130,7 +130,7 @@ __qa_source() {
 __qa_call() {
 	local shopts=$(shopt) OLDIFS="$IFS"
 	local retval
-	"$@"
+	__call-ebuildshell "$@"
 	retval=$?
 	set +e
 	[[ $shopts != $(shopt) ]] &&
@@ -537,6 +537,135 @@ if [[ -n ${QA_INTERCEPTORS} ]] ; then
 	unset BIN_PATH BIN BODY FUNC_SRC
 fi
 
+__call-ebuildshell() {
+	if ! has ebuildshell ${FEATURES}; then
+		"$@"
+		return $?
+	fi
+	local __ebuildshell_args=( "$@" )
+	# These are the variables I have seen 'bash -i' maintaining the values for:
+	local __ebuildshell_bash_i_vars="__ebuildshell_.*
+		_ BASH_ARGC BASH_ARGV BASH_COMMAND BASH_LINENO BASH_SOURCE
+		BASH_VERSINFO BASH_SUBSHELL BASHOPTS BASHPID COMP_WORDBREAKS
+		DIRSTACK EUID FUNCNAME GROUPS HISTCMD HISTFILE LINENO
+		PIPESTATUS PPID PWD RANDOM SECONDS SHELLOPTS UID"
+	# Allow recursive ebuildshell, for use in multibuild.eclass and similar:
+	local __ebuildshell_pid=${BASHPID:-$(__bashpid)}
+	local __ebuildshell_tmpf="${T}/ebuildshell.${__ebuildshell_pid}"
+	rm -f "${__ebuildshell_tmpf}."{ebuild,return}-{env,rovars}
+	(
+		(
+			declare -p
+			declare -fp
+			shopt -p
+			[[ ${BASH_VERSINFO[0]} == 3 ]] && export
+		) |
+		(
+			# we need everything but the bash vars after 'env -i'
+			2>"${__ebuildshell_tmpf}.ebuild-rovars" \
+			"${PORTAGE_PYTHON:-/tools/haubi/gentoo/s01en24/usr/bin/python}" \
+				"${PORTAGE_BIN_PATH}"/filter-bash-environment.py \
+					--report-readonly-variables \
+					--preserve-readonly-attribute \
+					"${__ebuildshell_bash_i_vars}" \
+				|| die "filter-bash-environment.py failed"
+		)
+		# The already readonly variables, without bash maintained ones:
+		__ebuildshell_ro_ebuild_vars=$(<"${__ebuildshell_tmpf}.ebuild-rovars")
+		cat <<-EOE
+			# properly quote the function arguments
+			$(declare -p __ebuildshell_args)
+			set -- "\${__ebuildshell_args[@]}"
+			unset __ebuildshell_args
+			# be informative about what to do
+			PS1="EBUILD ${PN} $1 \$ "
+			type $1
+			echo "WANTED: \$@"
+			echo "or use: \"\\\$@\""
+			# use bash history, but not the 'user's real one
+			HISTFILE=~/.bash_history
+			# for copy&paste function body lines containing: !
+			set +H
+			# Support the 'local' keyword outside any shell function
+			# for copy&paste of function body lines: Remember these
+			# "local" variable names for filtering from return-env.
+			__ebuildshell_local_vars=
+			__ebuildshell_local() {
+				local __ebuildshell_local_attr=
+				while [[ \${1} == -* ]]; do
+					__ebuildshell_local_attr+=" \${1}"
+					shift
+				done
+				__ebuildshell_local_vars+=" \${1%%=*} "
+				# Need to declare into the global shell namespace,
+				# as we are in some shell function here apparently.
+				declare -g \${__ebuildshell_local_attr} "\$@"
+			}
+			# within some function, BASH_LINENO is set, and we use real 'local'
+			alias local='\$( (( \${#BASH_LINENO} > 0 )) && echo local || echo __ebuildshell_local)'
+			# at exit, dump the current environment
+			trap "
+				unalias local
+				unset -f __ebuildshell_local
+				rm -f '${__ebuildshell_tmpf}.return-'*
+				(
+					(
+						declare -p
+						declare -fp
+						shopt -p | grep -v 'extdebug$'
+						$([[ ${BASH_VERSINFO[0]} == 3 ]] && echo export)
+					) |
+					(
+						# We may have more readonly variables now, but we
+						# need to filter variables that are readonly already.
+						2>'${__ebuildshell_tmpf}.return-rovars' \\
+						'${PORTAGE_PYTHON:-/tools/haubi/gentoo/s01en24/usr/bin/python}' \\
+							'${PORTAGE_BIN_PATH}'/filter-bash-environment.py \\
+								--report-readonly-variables \\
+								--preserve-readonly-attribute \\
+								'${__ebuildshell_bash_i_vars}
+								 ${__ebuildshell_ro_ebuild_vars}
+								 '\" \${__ebuildshell_local_vars}\" \\
+							|| die 'filter-bash-environment.py failed'
+					)
+				) > '${__ebuildshell_tmpf}.return-env'
+				" EXIT
+			# this is a debugging shell already
+			shopt -u extdebug
+			trap - DEBUG
+			# can do some cleanup already
+			rm -f '${__ebuildshell_tmpf}.ebuild-'*
+		EOE
+	) > "${__ebuildshell_tmpf}.ebuild-env"
+
+	# pre-fill the history with "$@"
+	echo '"$@"' >> ~/.bash_history
+
+	env -i ${BASH} --rcfile "${__ebuildshell_tmpf}.ebuild-env" -i
+
+	# The environment- and exit-status handling after leaving the ebuildshell
+	# prompt is expected to be identical as without the ebuildshell prompt.
+	local __ebuildshell_status=$?
+
+	# Defining a variable without using the the local keyword makes this
+	# variable visible to the 'global' shell namespace.  But 'declare -p'
+	# does not show the -g flag, so we need to add that one for all
+	# variables that have been visible to the EXIT trap above.
+	local __ebuildshell_orig_expand_aliases=$(shopt -p expand_aliases)
+	alias declare='declare -g'
+	shopt -s expand_aliases
+	source "${__ebuildshell_tmpf}.return-env"
+	unalias declare
+	${__ebuildshell_orig_expand_aliases}
+	# Portage does whitelist readonly variables. If an ebuild defines
+	# more readonly variables, their readonly attribute is removed.
+	# If we ever want to preserve additional readonly variables across
+	# phases, their names are in "${__ebuildshell_tmpf}.return-rovars".
+	rm -f "${__ebuildshell_tmpf}."{ebuild,return}-{env,rovars}
+
+	return ${__ebuildshell_status}
+}
+
 # Subshell/helper die support (must export for the die helper).
 export EBUILD_MASTER_PID=${BASHPID:-$(__bashpid)}
 trap 'exit 1' SIGTERM
diff --git a/bin/filter-bash-environment.py b/bin/filter-bash-environment.py
index a4cdc54..5ed2584 100755
--- a/bin/filter-bash-environment.py
+++ b/bin/filter-bash-environment.py
@@ -14,7 +14,7 @@ func_end_re = re.compile(r'^\}$')
 
 var_assign_re = re.compile(r'(^|^declare\s+-\S+\s+|^declare\s+|^export\s+)([^=\s]+)=("|\')?.*$')
 close_quote_re = re.compile(r'(\\"|"|\')\s*$')
-readonly_re = re.compile(r'^declare\s+-(\S*)r(\S*)\s+')
+readonly_re = re.compile(r'^declare\s+-(\S*)r(\S*)\s+([^=\s]+)')
 # declare without assignment
 var_declare_re = re.compile(r'^declare(\s+-\S+)?\s+([^=\s]+)\s*$')
 
@@ -29,7 +29,7 @@ def have_end_quote(quote, line):
 	return close_quote_match is not None and \
 		close_quote_match.group(1) == quote
 
-def filter_declare_readonly_opt(line):
+def filter_declare_readonly_opt(line, options):
 	readonly_match = readonly_re.match(line)
 	if readonly_match is not None:
 		declare_opts = ''
@@ -37,14 +37,19 @@ def filter_declare_readonly_opt(line):
 			group = readonly_match.group(i)
 			if group is not None:
 				declare_opts += group
+		var = readonly_match.group(3)
+		if '--report-readonly-variables' in options:
+			sys.stderr.write(var + "\n")
+		if '--preserve-readonly-attribute' in options:
+			declare_opts += 'r'
 		if declare_opts:
-			line = 'declare -%s %s' % \
-				(declare_opts, line[readonly_match.end():])
+			line = 'declare -%s %s%s' % \
+				(declare_opts, var, line[readonly_match.end():])
 		else:
-			line = 'declare ' + line[readonly_match.end():]
+			line = 'declare ' + var + line[readonly_match.end():]
 	return line
 
-def filter_bash_environment(pattern, file_in, file_out):
+def filter_bash_environment(pattern, file_in, file_out, options):
 	# Filter out any instances of the \1 character from variable values
 	# since this character multiplies each time that the environment
 	# is saved (strange bash behavior). This can eventually result in
@@ -77,7 +82,7 @@ def filter_bash_environment(pattern, file_in, file_out):
 					multi_line_quote = quote
 					multi_line_quote_filter = filter_this
 				if not filter_this:
-					line = filter_declare_readonly_opt(line)
+					line = filter_declare_readonly_opt(line, options)
 					file_out.write(line.replace("\1", ""))
 				continue
 			else:
@@ -87,7 +92,7 @@ def filter_bash_environment(pattern, file_in, file_out):
 					filter_this = pattern.match(declare_match.group(2)) \
 						is not None
 					if not filter_this:
-						line = filter_declare_readonly_opt(line)
+						line = filter_declare_readonly_opt(line, options)
 						file_out.write(line)
 					continue
 
@@ -124,13 +129,26 @@ if __name__ == "__main__":
 		"while leaving bash function definitions and here-documents " + \
 		"intact. The PATTERN is a space separated list of variable names" + \
 		" and it supports python regular expression syntax."
-	usage = "usage: %s PATTERN" % os.path.basename(sys.argv[0])
-	args = sys.argv[1:]
-
-	if '-h' in args or '--help' in args:
-		sys.stdout.write(usage + "\n")
-		sys.stdout.flush()
-		sys.exit(os.EX_OK)
+	usage = "usage: %s [-h|<options>] PATTERN" % os.path.basename(sys.argv[0])
+	args = []
+	known_options = {
+		'--report-readonly-variables':
+			"Write names of readonly variables to stderr.",
+		'--preserve-readonly-attribute':
+			"Preserve the '-r' flag in 'declare -r'.",
+	}
+	options = {}
+	for arg in sys.argv[1:]:
+		if arg in known_options.keys():
+			options[arg] = True
+			continue
+		if '-h' == arg or '--help' == arg:
+			sys.stdout.write(usage + "\n\nKnown <options>:\n\n")
+			for option, descr in known_options.items():
+				sys.stdout.write("  " + option + "\t" + descr + "\n")
+			sys.stdout.flush()
+			sys.exit(os.EX_OK)
+		args.append(arg)
 
 	if len(args) != 1:
 		sys.stderr.write(usage + "\n")
@@ -154,5 +172,5 @@ if __name__ == "__main__":
 
 	var_pattern = "^(%s)$" % "|".join(var_pattern)
 	filter_bash_environment(
-		re.compile(var_pattern), file_in, file_out)
+		re.compile(var_pattern), file_in, file_out, options)
 	file_out.flush()
diff --git a/bin/save-ebuild-env.sh b/bin/save-ebuild-env.sh
index ddef1fd..7264ced 100644
--- a/bin/save-ebuild-env.sh
+++ b/bin/save-ebuild-env.sh
@@ -53,7 +53,7 @@ __save_ebuild_env() {
 		einfo einfon ewarn eerror ebegin __eend eend KV_major \
 		KV_minor KV_micro KV_to_int get_KV has \
 		__has_phase_defined_up_to \
-		hasv hasq __qa_source __qa_call \
+		hasv hasq __qa_source __qa_call __call-ebuildshell \
 		addread addwrite adddeny addpredict __sb_append_var \
 		use usev useq has_version portageq \
 		best_version use_with use_enable register_die_hook \
diff --git a/man/make.conf.5 b/man/make.conf.5
index 26bbf06..865ede9 100644
--- a/man/make.conf.5
+++ b/man/make.conf.5
@@ -382,6 +382,12 @@ exist). Also see the related \fIunmerge\-backup\fR feature.
 Use locks to ensure that unsandboxed ebuild phases never execute
 concurrently. Also see \fIparallel\-install\fR.
 .TP
+.B ebuildshell
+Drop into an interactive shell for each phase function, meant for
+debugging.  Because the shell would normally be used to execute the
+phase function, commands like src_unpack or epatch are available in the
+interactive shell.  Use `die` to terminate the merge.
+.TP
 .B fail\-clean
 Clean up temporary files after a build failure. This is particularly useful
 if you have \fBPORTAGE_TMPDIR\fR on tmpfs. If this feature is enabled, you
diff --git a/pym/_emerge/AbstractEbuildProcess.py b/pym/_emerge/AbstractEbuildProcess.py
index 8bd30a6..4ff78b4 100644
--- a/pym/_emerge/AbstractEbuildProcess.py
+++ b/pym/_emerge/AbstractEbuildProcess.py
@@ -161,6 +161,7 @@ class AbstractEbuildProcess(SpawnProcess):
 			self.fd_pipes = {}
 		null_fd = None
 		if 0 not in self.fd_pipes and \
+			"ebuildshell" not in self.settings.features and \
 			self.phase not in self._phases_interactive_whitelist and \
 			"interactive" not in self.settings.get("PROPERTIES", "").split():
 			null_fd = os.open('/dev/null', os.O_RDONLY)
diff --git a/pym/portage/const.py b/pym/portage/const.py
index 814d7f4..d84f9bf 100644
--- a/pym/portage/const.py
+++ b/pym/portage/const.py
@@ -142,6 +142,7 @@ SUPPORTED_FEATURES       = frozenset([
 	"distlocks",
 	"downgrade-backup",
 	"ebuild-locks",
+	"ebuildshell",
 	"fail-clean",
 	"fakeroot",
 	"fixlafiles",
-- 
2.7.3

